{"version":3,"sources":["App.tsx","Board.tsx","serviceWorker.ts","index.tsx"],"names":["MirrorMode","TileTypes","Board","props","exchange","a","b","setState","state","ai","tiles","findIndex","e","id","bi","forEach","tile","i","this","onChange","tuning","className","SlideGrid","canExchange","tap","onTap","smear","onSmear","map","type","key","find","React","Component","width","height","defaultMirrorMode","Number","sessionStorage","getItem","None","App","useState","JSON","parse","length","push","getDefaultTiles","setTiles","mirror","setMirror","lastType","setLastType","onChangeTiles","newTiles","forceMirror","mirrorMode","changed","console","log","Horizontal","Both","y0","x0","copyType","Vertical","Rotational","x1","y1","t0","t1","setItem","toString","stringify","boardJson","indexOf","Container","fluid","Row","Col","Form","Group","Label","Control","as","value","currentTarget","Object","entries","ButtonToolbar","Button","onClick","sample","xs","DEFAULT_TUNING","index","readOnly","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4MAgBKA,E,qICTQC,G,MAAwB,CACjC,QACA,UACA,gBACA,gBACA,cACA,cACA,UAuBiBC,E,YAEjB,WAAYC,GAA+B,IAAD,8BACtC,4CAAMA,KA+BAC,SAAW,SAACC,EAAWC,GAC7B,EAAKC,UAAS,SAACC,GACX,IAAMC,EAAKD,EAAME,MAAMC,WAAU,SAACC,GAAD,OAAOA,EAAEC,KAAOR,KAC3CS,EAAKN,EAAME,MAAMC,WAAU,SAACC,GAAD,OAAOA,EAAEC,KAAOP,KAC3CI,EAAiB,GAUvB,OATAF,EAAME,MAAMK,SAAQ,SAACC,EAAMC,GACnBA,IAAMR,EACNC,EAAMI,GAAME,EACLC,IAAMH,EACbJ,EAAMD,GAAMO,EAEZN,EAAMO,GAAKD,KAGZ,CAAEN,aA5Cb,EAAKF,MAAQ,CAACE,MAAO,EAAKP,MAAMO,OAFM,E,kFAKb,IAAD,IACxB,aAAAQ,KAAKf,OAAMgB,gBAAX,gBAAsBD,KAAKV,MAAME,S,+BAGpB,IACLU,EAAWF,KAAKf,MAAhBiB,OACR,OAAO,yBAAKC,UAAU,SAClB,kBAACC,EAAA,EAAD,CAAWF,OAAQA,EAAQhB,SAAUc,KAAKd,SAAUmB,YAAaL,KAAKK,YAAaC,IAAKN,KAAKf,MAAMsB,MAAOC,MAAOR,KAAKf,MAAMwB,SACvHT,KAAKV,MAAME,MAAMkB,KAAI,SAACZ,GAAD,OAAU,yBAAKK,UAAW,QAAUL,EAAKa,KAAMC,IAAKd,EAAKH,GAAIA,GAAIG,EAAKH,Y,kCAOlFA,GAClB,OAAOK,KAAKV,MAAME,MAAMqB,MAAK,SAACnB,GAAD,OAAOA,EAAEC,KAAOA,O,uCAGtBA,GACvB,OAAOK,KAAKV,MAAME,MAAMC,WAAU,SAACC,GAAD,OAAOA,EAAEC,KAAOA,O,wCAG1BG,GACxB,OAAO,yBAAKK,UAAWL,EAAKa,W,GA/BDG,IAAMC,W,0DDrBpCjC,O,eAAAA,I,uBAAAA,I,2BAAAA,I,eAAAA,I,4BAAAA,M,KAQL,IAAMkC,EAAQ,GACRC,EAAS,GAETC,EADqBC,OAAM,UAACC,eAAeC,QAAQ,6BAAxB,QAAiDvC,EAAWwC,MAsK9EC,MAnKO,WAAO,IAAD,EACAT,IAAMU,SA0JlC,WAEE,IADA,IAAMhC,EAAiBiC,KAAKC,MAAMN,eAAeC,QAAQ,4BAA8B,MAC9EtB,EAAIP,EAAMmC,OAAQ5B,EAAIiB,EAAQC,EAAQlB,IAC7CP,EAAMoC,KAAK,CAAEjC,GAAG,QAAD,OAAUI,GAAKY,KAAM,UAEtC,OAAOnB,EA/JkCqC,IADf,mBACnBrC,EADmB,KACZsC,EADY,OAEEhB,IAAMU,SAASN,GAFjB,mBAEnBa,EAFmB,KAEXC,EAFW,OAGMlB,IAAMU,SAASzC,EAAU,IAH/B,mBAGnBkD,EAHmB,KAGTC,EAHS,KAI1B,SAASC,EAAcC,EAAmBC,GACxC,IAAMC,EAAU,OAAGD,QAAH,IAAGA,IAAeN,EAC9BQ,GAAU,EAGd,GAFAH,EAAQ,YAAOA,GACfI,QAAQC,IAAI,CAAEH,eACVA,IAAexD,EAAW4D,YAAcJ,IAAexD,EAAW6D,KACpE,IAAK,IAAIC,EAAK,EAAGA,EAAK3B,EAAQ2B,IAC5B,IAAK,IAAIC,EAAK,EAAGA,EAAK7B,EAAQ,EAAG6B,IAAM,CAGrCC,EAASF,EAAIC,EADFD,EADA5B,EAAQ,EAAI6B,GAM7B,GAAIP,IAAexD,EAAWiE,UAAYT,IAAexD,EAAW6D,KAClE,IAAK,IAAIC,EAAK,EAAGA,EAAK3B,EAAS,EAAG2B,IAChC,IAAK,IAAIC,EAAK,EAAGA,EAAK7B,EAAO6B,IAAM,CAGjCC,EAASF,EAAIC,EADF5B,EAAS,EAAI2B,EADbC,GAMjB,GAAIP,IAAexD,EAAWkE,WAC5B,IAAK,IAAIJ,EAAK,EAAGA,EAAK3B,EAAS,EAAG2B,IAChC,IAAK,IAAIC,EAAK,EAAGA,EAAK7B,EAAQ,EAAG6B,IAAM,CACrC,IAAII,EAAKjC,EAAQ,EAAI4B,EACjBM,EAAKL,EACTC,EAASF,EAAIC,EAAIK,EAAID,GAGrBH,EAASF,EAAIC,EADbK,EAAKjC,EAAS,EAAI2B,EADlBK,EAAKjC,EAAQ,EAAI6B,GAKjBC,EAASF,EAAIC,EADbK,EAAKjC,EAAS,EAAI4B,EADlBI,EAAKL,GAWX,SAASE,EAASF,EAAYC,EAAYK,EAAYD,GACpD,IAAME,EAAKf,EAASQ,EAAK5B,EAAQ6B,GAC3BO,EAAKhB,EAASc,EAAKlC,EAAQiC,GAC7BG,EAAGzC,OAASwC,EAAGxC,OACjB6B,QAAQC,IAAI,CAAEI,KAAID,KAAIK,KAAIC,KAAIC,KAAIC,OAClCA,EAAGzC,KAAOwC,EAAGxC,KACb4B,GAAU,GAVVA,GACFT,EAASM,GAuCbhB,eAAeiC,QAAQ,qBAAsBtB,EAAOuB,YACpDlC,eAAeiC,QAAQ,0BAA2B5B,KAAK8B,UAAU/D,IACjE,IAAMgE,EAAY/B,KAAK8B,UAAU/D,EAAMkB,KAAI,SAACZ,GAAD,OAAUf,EAAU0E,QAAQ3D,EAAKa,UAC5E,OACE,kBAAC+C,EAAA,EAAD,CAAWC,OAAO,GAChB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,2CACA,uFACA,2CACA,4BACI,kHAOR,kBAACD,EAAA,EAAD,CAAKzD,UAAU,OACb,kBAAC0D,EAAA,EAAD,KACA,kBAACC,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,eAGA,kBAACF,EAAA,EAAKG,QAAN,CAAcC,GAAG,SAASC,MAAOpC,EAAOuB,WAAYrD,SAlD5D,SAAwBP,GACtB,IAAM4C,EAAyBnB,OAAOzB,EAAE0E,cAAcD,OACtDnC,EAAUM,GACVH,EAAc3C,EAAO8C,KAgDZ+B,OAAOC,QAAQxF,GAAY4B,KAAI,YAAmB,IAAD,mBAAhBE,EAAgB,KAAXuD,EAAW,KAChD,GAAqB,kBAAVA,EACT,OAAO,4BAAQvD,IAAKA,EAAKuD,MAAOA,GAAQvD,QAK5C,kBAACkD,EAAA,EAAKC,MAAN,KAEF,kBAACD,EAAA,EAAKE,MAAN,aAGA,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAS,WACfjF,EAAMK,SAAQ,SAACC,GAAD,OAAUA,EAAKa,KAAO,WACpCmB,EAAS,YAAItC,MAFf,SAMA,kBAACgF,EAAA,EAAD,CAAQC,QAAS,WACfjF,EAAMK,SAAQ,SAACC,GAAD,OAAUA,EAAKa,KAAO+D,IAAO3F,MAC3C+C,EAAS,YAAItC,MAFf,aASJ,kBAACqE,EAAA,EAAD,CAAKc,GAAG,QACN,kBAAC,EAAD,CACE3D,MAAO,GAAIC,OAAQ,GACnBzB,MAAOA,EACPU,OAAM,eAAO0E,KACbrE,MA/EV,SAAeK,GACb,IAAMd,EAAON,EAAMqB,MAAK,SAACf,GAAD,OAAUA,EAAKH,KAAOiB,KAC9C,GAAKd,EAAL,CAGA,IAAIa,EAAOb,EAAKa,KACVkE,EAAQ9F,EAAU0E,QAAQ9C,GAChCb,EAAKa,KAAO5B,GAAW8F,EAAQ,GAAK9F,EAAU4C,QAC9CO,EAAYpC,EAAKa,MACjBmB,EAAS,YAAItC,MAuELiB,QArEV,SAAiBG,GACf,IAAMd,EAAON,EAAMqB,MAAK,SAACf,GAAD,OAAUA,EAAKH,KAAOiB,KAC9C,GAAKd,EAAL,CAGA,IAAIa,EAAOb,EAAKa,KACF5B,EAAU0E,QAAQ9C,GAChCb,EAAKa,KAAOsB,EACZH,EAAS,YAAItC,MA8DLS,SAAUkC,KAEd,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAKG,QAAN,CAAcC,GAAG,WAAWY,UAAU,EACpC3E,UAAU,OACVgE,MAAOX,QErKCuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d63d1995.chunk.js","sourcesContent":["import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport './App.css';\nimport Board, { ITile, TileTypes } from './Board';\nimport { DEFAULT_TUNING } from '@pyrogenic/slide-grid/lib/SlideGrid';\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport sample from 'lodash/sample';\nimport zip from 'lodash/zip';\nimport Form from 'react-bootstrap/Form';\n\n/* TODO: changes to un-mirrored cells don't cause sessionStorage or JSON to update. */\n\nenum MirrorMode {\n  'None',\n  'Vertical',\n  'Horizontal',\n  'Both',\n  'Rotational',\n};\n\nconst width = 13;\nconst height = 13;\nconst sessionStorageMode = Number(sessionStorage.getItem('board-maker/mirror') ?? MirrorMode.None);\nconst defaultMirrorMode = sessionStorageMode as MirrorMode;\n\nconst App: React.FC = () => {\n  const [tiles, setTiles] = React.useState(getDefaultTiles());\n  const [mirror, setMirror] = React.useState(defaultMirrorMode);\n  const [lastType, setLastType] = React.useState(TileTypes[0]!);\n  function onChangeTiles(newTiles: ITile[], forceMirror?: MirrorMode) {\n    const mirrorMode = forceMirror ?? mirror;\n    let changed = false;\n    newTiles = [...newTiles];\n    console.log({ mirrorMode });\n    if (mirrorMode === MirrorMode.Horizontal || mirrorMode === MirrorMode.Both) {\n      for (let y0 = 0; y0 < height; y0++) {\n        for (let x0 = 0; x0 < width / 2; x0++) {\n          const x1 = width - 1 - x0;\n          const y1 = y0;\n          copyType(y0, x0, y1, x1);\n        }\n      }\n    }\n    if (mirrorMode === MirrorMode.Vertical || mirrorMode === MirrorMode.Both) {\n      for (let y0 = 0; y0 < height / 2; y0++) {\n        for (let x0 = 0; x0 < width; x0++) {\n          const x1 = x0;\n          const y1 = height - 1 - y0;\n          copyType(y0, x0, y1, x1);\n        }\n      }\n    }\n    if (mirrorMode === MirrorMode.Rotational) {\n      for (let y0 = 0; y0 < height / 2; y0++) {\n        for (let x0 = 0; x0 < width / 2; x0++) {\n          let x1 = width - 1 - y0;\n          let y1 = x0;\n          copyType(y0, x0, y1, x1);\n          x1 = width - 1 - x0;\n          y1 = height - 1 - y0;\n          copyType(y0, x0, y1, x1);\n          x1 = y0;\n          y1 = height - 1 - x0;\n          copyType(y0, x0, y1, x1);\n        }\n      }\n    }\n\n    if (changed) {\n      setTiles(newTiles);\n    }\n\n    function copyType(y0: number, x0: number, y1: number, x1: number) {\n      const t0 = newTiles[y0 * width + x0];\n      const t1 = newTiles[y1 * width + x1];\n      if (t1.type !== t0.type) {\n        console.log({ x0, y0, x1, y1, t0, t1 });\n        t1.type = t0.type;\n        changed = true;\n      }\n    }\n  }\n  function onChangeMirror(e: React.FormEvent<HTMLSelectElement>) {\n    const mirrorMode: MirrorMode = Number(e.currentTarget.value);\n    setMirror(mirrorMode); // this is delayed\n    onChangeTiles(tiles, mirrorMode);\n  }\n  function onTap(key: string) {\n    const tile = tiles.find((tile) => tile.id === key);\n    if (!tile) {\n      return;\n    }\n    let type = tile.type;\n    const index = TileTypes.indexOf(type);\n    tile.type = TileTypes[(index + 1) % TileTypes.length];\n    setLastType(tile.type);\n    setTiles([...tiles]);\n  }\n  function onSmear(key: string) {\n    const tile = tiles.find((tile) => tile.id === key);\n    if (!tile) {\n      return;\n    }\n    let type = tile.type;\n    const index = TileTypes.indexOf(type);\n    tile.type = lastType;\n    setTiles([...tiles]);\n  }\n  sessionStorage.setItem('board-maker/mirror', mirror.toString());\n  sessionStorage.setItem('board-maker/board/tiles', JSON.stringify(tiles));\n  const boardJson = JSON.stringify(tiles.map((tile) => TileTypes.indexOf(tile.type)));\n  return (\n    <Container fluid={true}>\n      <Row>\n        <Col>\n          <h1>Board Maker</h1>\n          <p>Click to cycle through tile options.  Drag to rearrange.</p>\n          <p>Known issues:\n          <ul>\n              <li>\n                Session data and JSON output doesn't update unless a mirrored cell is changed.\n            </li>\n            </ul>\n          </p>\n        </Col>\n      </Row>\n      <Row className=\"m-4\">\n        <Col>\n        <Form.Group>\n          <Form.Label>\n            Mirror\n        </Form.Label>\n          <Form.Control as=\"select\" value={mirror.toString()} onChange={onChangeMirror}>\n            {Object.entries(MirrorMode).map(([key, value]) => {\n              if (typeof value === 'number') {\n                return <option key={key} value={value}>{key}</option>;\n              }\n            })}\n          </Form.Control>\n            </Form.Group>\n            <Form.Group>\n              \n          <Form.Label>\n            Fill\n        </Form.Label>\n          <ButtonToolbar>\n            <Button onClick={() => {\n              tiles.forEach((tile) => tile.type = 'empty');\n              setTiles([...tiles]);\n            }}>\n              Clear\n              </Button>\n            <Button onClick={() => {\n              tiles.forEach((tile) => tile.type = sample(TileTypes)!);\n              setTiles([...tiles]);\n            }}>\n              Random\n              </Button>\n          </ButtonToolbar>\n          </Form.Group>\n        </Col>\n        <Col xs=\"auto\">\n          <Board\n            width={13} height={13}\n            tiles={tiles}\n            tuning={{ ...DEFAULT_TUNING }}\n            onTap={onTap}\n            onSmear={onSmear}\n            onChange={onChangeTiles} />\n        </Col>\n        <Col>\n          <Form.Control as=\"textarea\" readOnly={true}\n            className=\"json\"\n            value={boardJson} />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nfunction getDefaultTiles() {\n  const tiles: ITile[] = JSON.parse(sessionStorage.getItem('board-maker/board/tiles') || \"[]\") as ITile[];\n  for (let i = tiles.length; i < width * height; i++) {\n    tiles.push({ id: `tile-${i}`, type: 'empty' });\n  }\n  return tiles;\n}\n\nexport default App;\n","import React from 'react';\nimport SlideGrid, { ISlideGridTuning } from '@pyrogenic/slide-grid/lib/SlideGrid';\nimport '@pyrogenic/slide-grid/lib/SlideGrid.css';\nimport sample from 'lodash/sample';\n\nexport type TileType = 'empty' | 'blocker' | 'double-letter' | 'triple-letter' | 'double-word' | 'triple-word' | 'start';\n\nexport const TileTypes: TileType[] = [\n    'empty',\n    'blocker',\n    'double-letter',\n    'triple-letter',\n    'double-word',\n    'triple-word',\n    'start',\n];\n\nexport interface ITile {\n    id: string;\n    type: TileType;\n}\n\nexport interface IBoardState {\n    tiles: ITile[];\n}\n\nexport interface IBoardProps {\n    tuning: ISlideGridTuning;\n    tiles: ITile[];\n    height: number;\n    width: number;\n\n    onTap?: (key: string) => void;\n    onSmear?: ((key: string) => void);\n    onChange?: (tiles: ITile[]) => void;\n};\n\nexport default class Board extends React.Component<IBoardProps, IBoardState> {\n\n    constructor(props: Readonly<IBoardProps>) {\n        super(props);\n        this.state = {tiles: this.props.tiles};\n    }\n\n    public componentDidUpdate() {\n        this.props.onChange?.(this.state.tiles);\n    }\n\n    public render() {\n        const { tuning } = this.props;\n        return <div className=\"board\">\n            <SlideGrid tuning={tuning} exchange={this.exchange} canExchange={this.canExchange} tap={this.props.onTap} smear={this.props.onSmear}>\n                {this.state.tiles.map((tile) => <div className={\"tile \" + tile.type} key={tile.id} id={tile.id}/>)}\n            </SlideGrid>\n        </div>;\n    }\n\n    protected canExchange?(a: string, b?: string): boolean | number;\n\n    protected getTileById(id: string) {\n        return this.state.tiles.find((e) => e.id === id)!;\n    }\n\n    protected getTileIndexById(id: string) {\n        return this.state.tiles.findIndex((e) => e.id === id)!;\n    }\n\n    protected renderTileContent(tile: ITile) {\n        return <div className={tile.type} />;\n    }\n\n    protected exchange = (a: string, b: string) => {\n        this.setState((state) => {\n            const ai = state.tiles.findIndex((e) => e.id === a);\n            const bi = state.tiles.findIndex((e) => e.id === b);\n            const tiles: ITile[] = [];\n            state.tiles.forEach((tile, i) => {\n                if (i === ai) {\n                    tiles[bi] = tile;\n                } else if (i === bi) {\n                    tiles[ai] = tile;\n                } else {\n                    tiles[i] = tile;\n                }\n            });\n            return { tiles };\n        })\n    }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.js';\nimport 'popper.js/dist/popper';\nimport 'jquery/dist/jquery.slim';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}